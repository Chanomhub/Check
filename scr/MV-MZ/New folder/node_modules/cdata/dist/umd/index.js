(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.cdata = {})));
}(this, (function (exports) { 'use strict';

    // This file is part of cdata, copyright (c) 2017- BusFaster Ltd.
    // Released under the MIT license, see LICENSE.
    var BinaryHeap = /** @class */ (function () {
        /** @param compare Compare two items, as used with Array.sort. */
        function BinaryHeap(compare, _a) {
            var _b = _a === void 0 ? {} : _a, getPos = _b.getPos, setPos = _b.setPos;
            this.compare = compare;
            this.heap = [];
            this.last = 0;
            this.getPos = getPos;
            this.setPos = setPos || (function (item, pos) { });
        }
        /** Erase all contents of the heap. */
        BinaryHeap.prototype.clear = function () {
            this.heap = [];
            this.last = 0;
        };
        BinaryHeap.prototype.isEmpty = function () { return (!this.last); };
        /** Insert a new item in the heap.
          * @return Index of the inserted item in the heap's internal array. */
        BinaryHeap.prototype.insert = function (item) {
            return (this.bubble(item, this.last++));
        };
        /** Update the position of an item in the heap. */
        BinaryHeap.prototype.update = function (item) {
            var getPos = this.getPos;
            if (!getPos)
                throw (new Error('Cannot get index of item in the heap'));
            var pos = getPos(item);
            var posParent = (pos - 1) >>> 1;
            var delta = this.compare(this.heap[posParent], item);
            if (delta > 0)
                this.bubble(item, pos);
            else if (delta < 0)
                this.sink(item, pos);
            return (item);
        };
        /** Get the top item of the heap without removing it. */
        BinaryHeap.prototype.peekTop = function () {
            return (!this.last ? null : this.heap[0]);
        };
        /** Remove and return the top item of the heap. */
        BinaryHeap.prototype.extractTop = function () {
            if (!this.last)
                return (null);
            var top = this.heap[0];
            var bottom = this.heap[--this.last];
            // Erase last item.
            this.heap[this.last] = void 0;
            this.sink(bottom, 0);
            return (top);
        };
        /** Move an item upwards in the heap, to its correct position.
          * @param item Item to move.
          * @param pos Index of the item in the heap's internal array. */
        BinaryHeap.prototype.bubble = function (item, pos) {
            var heap = this.heap;
            var compare = this.compare;
            var setPos = this.setPos;
            var posParent;
            var parent;
            while (pos > 0) {
                posParent = (pos - 1) >>> 1;
                parent = heap[posParent];
                if (compare(parent, item) <= 0)
                    break;
                heap[pos] = parent;
                setPos(parent, pos);
                pos = posParent;
            }
            heap[pos] = item;
            setPos(item, pos);
        };
        /** Move an item downwards in the heap, to its correct position.
          * @param item Item to move.
          * @param pos Index of the item in the heap's internal array. */
        BinaryHeap.prototype.sink = function (item, pos) {
            var heap = this.heap;
            var last = this.last;
            var compare = this.compare;
            var setPos = this.setPos;
            var posLeft;
            var posRight;
            var posNext;
            var left;
            var right;
            while (1) {
                posLeft = pos * 2 + 1;
                posRight = pos * 2 + 2;
                if (posRight < last) {
                    left = heap[posLeft];
                    right = heap[posRight];
                    if (compare(left, right) < 0) {
                        if (compare(left, item) < 0)
                            posNext = posLeft;
                        else
                            break;
                    }
                    else {
                        if (compare(right, item) < 0)
                            posNext = posRight;
                        else
                            break;
                    }
                }
                else {
                    if (posLeft < last && compare(heap[posLeft], item) < 0)
                        posNext = posLeft;
                    else
                        break;
                }
                heap[pos] = heap[posNext];
                setPos(heap[pos], pos);
                pos = posNext;
            }
            heap[pos] = item;
            setPos(item, pos);
        };
        return BinaryHeap;
    }());

    exports.BinaryHeap = BinaryHeap;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

{"version":3,"file":"json-translator.cjs.production.min.js","sources":["../src/utils/micro.ts","../src/modules/languages.ts","../src/utils/console.ts","../src/modules/functions.ts","../src/modules/helpers.ts","../src/modules/modules.ts","../src/utils/yaml.ts","../src/core/core.ts","../src/core/ignorer.ts","../src/core/translator.ts","../src/core/json_object.ts","../src/core/json_file.ts","../src/core/proxy_file.ts","../src/cli/prompt.ts","../src/cli/cli.ts","../src/index.ts"],"sourcesContent":["import * as packageJSON from '../../package.json';\n\nexport function translationStatistic(\n  totalTranslated: number,\n  totalTranslation: number\n): string {\n  return `${totalTranslated} of ${totalTranslation} translated.`;\n}\nexport function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexport const current_version = packageJSON.version;\nexport const default_value = '--';\nexport const translation_value_limit = 5000;\nexport const default_concurrency_limit = 3;\nexport const fallbacks = {\n  yes: true,\n  no: false,\n};\nexport const default_fallback = fallbacks.no;\n","export const GoogleTranslateLanguages: Record<string, string> = {\n  Automatic: 'auto',\n  Afrikaans: 'af',\n  Albanian: 'sq',\n  Amharic: 'am',\n  Arabic: 'ar',\n  Armenian: 'hy',\n  Azerbaijani: 'az',\n  Basque: 'eu',\n  Belarusian: 'be',\n  Bengali: 'bn',\n  Bosnian: 'bs',\n  Bulgarian: 'bg',\n  Catalan: 'ca',\n  Cebuano: 'ceb',\n  Chichewa: 'ny',\n  Chinese_Simplified: 'zh-CN',\n  Chinese_Traditional: 'zh-TW',\n  Corsican: 'co',\n  Croatian: 'hr',\n  Czech: 'cs',\n  Danish: 'da',\n  Dutch: 'nl',\n  English: 'en',\n  Esperanto: 'eo',\n  Estonian: 'et',\n  Filipino: 'tl',\n  Finnish: 'fi',\n  French: 'fr',\n  Frisian: 'fy',\n  Galician: 'gl',\n  Georgian: 'ka',\n  German: 'de',\n  Greek: 'el',\n  Gujarati: 'gu',\n  Haitian_Creole: 'ht',\n  Hausa: 'ha',\n  Hawaiian: 'haw',\n  Hebrew: 'iw',\n  Hindi: 'hi',\n  Hmong: 'hmn',\n  Hungarian: 'hu',\n  Icelandic: 'is',\n  Igbo: 'ig',\n  Indonesian: 'id',\n  Irish: 'ga',\n  Italian: 'it',\n  Japanese: 'ja',\n  Javanese: 'jw',\n  Kannada: 'kn',\n  Kazakh: 'kk',\n  Khmer: 'km',\n  Korean: 'ko',\n  Kurdish_Kurmanji: 'ku',\n  Kyrgyz: 'ky',\n  Lao: 'lo',\n  Latin: 'la',\n  Latvian: 'lv',\n  Lithuanian: 'lt',\n  Luxembourgish: 'lb',\n  Macedonian: 'mk',\n  Malagasy: 'mg',\n  Malay: 'ms',\n  Malayalam: 'ml',\n  Maltese: 'mt',\n  Maori: 'mi',\n  Marathi: 'mr',\n  Mongolian: 'mn',\n  Myanmar_Burmese: 'my',\n  Nepali: 'ne',\n  Norwegian: 'no',\n  Pashto: 'ps',\n  Persian: 'fa',\n  Polish: 'pl',\n  Portuguese: 'pt',\n  Punjabi: 'pa',\n  Romanian: 'ro',\n  Russian: 'ru',\n  Samoan: 'sm',\n  Scots_Gaelic: 'gd',\n  Serbian: 'sr',\n  Sesotho: 'st',\n  Shona: 'sn',\n  Sindhi: 'sd',\n  Sinhala: 'si',\n  Slovak: 'sk',\n  Slovenian: 'sl',\n  Somali: 'so',\n  Spanish: 'es',\n  Sundanese: 'su',\n  Swahili: 'sw',\n  Swedish: 'sv',\n  Tajik: 'tg',\n  Tamil: 'ta',\n  Telugu: 'te',\n  Thai: 'th',\n  Turkish: 'tr',\n  Ukrainian: 'uk',\n  Urdu: 'ur',\n  Uzbek: 'uz',\n  Vietnamese: 'vi',\n  Welsh: 'cy',\n  Xhosa: 'xh',\n  Yiddish: 'yi',\n  Yoruba: 'yo',\n  Zulu: 'zu',\n};\n\nexport const GoogleTranslate2Languages: Record<string, string> = {\n  Automatic: 'auto',\n  Afrikaans: 'af',\n  Albanian: 'sq',\n  Amharic: 'am',\n  Arabic: 'ar',\n  Armenian: 'hy',\n  Azerbaijani: 'az',\n  Basque: 'eu',\n  Belarusian: 'be',\n  Bengali: 'bn',\n  Bosnian: 'bs',\n  Bulgarian: 'bg',\n  Catalan: 'ca',\n  Cebuano: 'ceb',\n  Chichewa: 'ny',\n  Chinese_Simplified: 'zh-CN',\n  Chinese_Traditional: 'zh-TW',\n  Corsican: 'co',\n  Croatian: 'hr',\n  Czech: 'cs',\n  Danish: 'da',\n  Dutch: 'nl',\n  English: 'en',\n  Esperanto: 'eo',\n  Estonian: 'et',\n  Filipino: 'tl',\n  Finnish: 'fi',\n  French: 'fr',\n  Frisian: 'fy',\n  Galician: 'gl',\n  Georgian: 'ka',\n  German: 'de',\n  Greek: 'el',\n  Gujarati: 'gu',\n  Haitian_Creole: 'ht',\n  Hausa: 'ha',\n  Hawaiian: 'haw',\n  Hebrew: 'iw',\n  Hindi: 'hi',\n  Hmong: 'hmn',\n  Hungarian: 'hu',\n  Icelandic: 'is',\n  Igbo: 'ig',\n  Indonesian: 'id',\n  Irish: 'ga',\n  Italian: 'it',\n  Japanese: 'ja',\n  Javanese: 'jw',\n  Kannada: 'kn',\n  Kazakh: 'kk',\n  Khmer: 'km',\n  Korean: 'ko',\n  Kurdish_Kurmanji: 'ku',\n  Kyrgyz: 'ky',\n  Lao: 'lo',\n  Latin: 'la',\n  Latvian: 'lv',\n  Lithuanian: 'lt',\n  Luxembourgish: 'lb',\n  Macedonian: 'mk',\n  Malagasy: 'mg',\n  Malay: 'ms',\n  Malayalam: 'ml',\n  Maltese: 'mt',\n  Maori: 'mi',\n  Marathi: 'mr',\n  Mongolian: 'mn',\n  Myanmar_Burmese: 'my',\n  Nepali: 'ne',\n  Norwegian: 'no',\n  Pashto: 'ps',\n  Persian: 'fa',\n  Polish: 'pl',\n  Portuguese: 'pt',\n  Punjabi: 'pa',\n  Romanian: 'ro',\n  Russian: 'ru',\n  Samoan: 'sm',\n  Scots_Gaelic: 'gd',\n  Serbian: 'sr',\n  Sesotho: 'st',\n  Shona: 'sn',\n  Sindhi: 'sd',\n  Sinhala: 'si',\n  Slovak: 'sk',\n  Slovenian: 'sl',\n  Somali: 'so',\n  Spanish: 'es',\n  Sundanese: 'su',\n  Swahili: 'sw',\n  Swedish: 'sv',\n  Tajik: 'tg',\n  Tamil: 'ta',\n  Telugu: 'te',\n  Thai: 'th',\n  Turkish: 'tr',\n  Ukrainian: 'uk',\n  Urdu: 'ur',\n  Uzbek: 'uz',\n  Vietnamese: 'vi',\n  Welsh: 'cy',\n  Xhosa: 'xh',\n  Yiddish: 'yi',\n  Yoruba: 'yo',\n  Zulu: 'zu',\n};\n\nexport const LibreTranslateLanguages: Record<string, string> = {\n  Automatic: 'auto',\n  English: 'en',\n  Arabic: 'ar',\n  Azerbaijani: 'az',\n  Chinese: 'zh',\n  Czech: 'cs',\n  Danish: 'da',\n  Dutch: 'nl',\n  Esperanto: 'eo',\n  Finnish: 'fi',\n  French: 'fr',\n  German: 'de',\n  Greek: 'el',\n  Hebrew: 'iw',\n  Hindi: 'hi',\n  Hungarian: 'hu',\n  Indonesian: 'id',\n  Irish: 'ga',\n  Italian: 'it',\n  Japanese: 'ja',\n  Korean: 'ko',\n  Persian: 'fa',\n  Polish: 'pl',\n  Portuguese: 'pt',\n  Russian: 'ru',\n  Slovak: 'sk',\n  Spanish: 'es',\n  Swedish: 'sv',\n  Turkish: 'tr',\n  Ukrainian: 'uk',\n};\n\nexport const ArgosTranslateLanguages: Record<string, string> = {\n  Automatic: 'auto',\n  English: 'en',\n  Arabic: 'ar',\n  Chinese: 'zh',\n  French: 'fr',\n  German: 'de',\n  Hindi: 'hi',\n  Indonesian: 'id',\n  Irish: 'ga',\n  Italian: 'it',\n  Japanese: 'ja',\n  Korean: 'ko',\n  Polish: 'pl',\n  Portuguese: 'pt',\n  Russian: 'ru',\n  Spanish: 'es',\n  Turkish: 'tr',\n  Vietnamese: 'vi',\n};\n\nexport const BingTranslateLanguages: Record<string, string> = {\n  Automatic: 'auto-detect',\n  Afrikaans: 'af',\n  Albanian: 'sq',\n  Amharic: 'am',\n  Arabic: 'ar',\n  Armenian: 'hy',\n  Assamese: 'as',\n  Azerbaijani: 'az',\n  Bangla: 'bn',\n  Bashkir: 'ba',\n  Basque: 'eu',\n  Bosnian: 'bs',\n  Bulgarian: 'bg',\n  Cantonese_Traditional: 'yue',\n  Catalan: 'ca',\n  Chinese_Literary: 'lzh',\n  Chinese_Simplified: 'zh-Hans',\n  Chinese_Traditional: 'zh-Hant',\n  Croatian: 'hr',\n  Czech: 'cs',\n  Danish: 'da',\n  Dari: 'prs',\n  Divehi: 'dv',\n  Dutch: 'nl',\n  English: 'en',\n  Estonian: 'et',\n  Faroese: 'fo',\n  Fijian: 'fj',\n  Filipino: 'fil',\n  Finnish: 'fi',\n  French: 'fr',\n  French_Canada: 'fr-CA',\n  Galician: 'gl',\n  Georgian: 'ka',\n  German: 'de',\n  Greek: 'el',\n  Gujarati: 'gu',\n  Haitian_Creole: 'ht',\n  Hebrew: 'he',\n  Hindi: 'hi',\n  Hmong_Daw: 'mww',\n  Hungarian: 'hu',\n  Icelandic: 'is',\n  Indonesian: 'id',\n  Inuinnaqtun: 'ikt',\n  Inuktitut: 'iu',\n  Inuktitut_Latin: 'iu-Latn',\n  Irish: 'ga',\n  Italian: 'it',\n  Japanese: 'ja',\n  Kannada: 'kn',\n  Kazakh: 'kk',\n  Khmer: 'km',\n  Klingon_Latin: 'tlh-Latn',\n  Korean: 'ko',\n  Kurdish_Central: 'ku',\n  Kurdish_Northern: 'kmr',\n  Kyrgyz: 'ky',\n  Lao: 'lo',\n  Latvian: 'lv',\n  Lithuanian: 'lt',\n  Macedonian: 'mk',\n  Malagasy: 'mg',\n  Malay: 'ms',\n  Malayalam: 'ml',\n  Maltese: 'mt',\n  Marathi: 'mr',\n  Mongolian_Cyrillic: 'mn-Cyrl',\n  Mongolian_Traditional: 'mn-Mong',\n  Myanmar_Burmese: 'my',\n  Māori: 'mi',\n  Nepali: 'ne',\n  Norwegian: 'nb',\n  Odia: 'or',\n  Pashto: 'ps',\n  Persian: 'fa',\n  Polish: 'pl',\n  Portuguese_Brazil: 'pt',\n  Portuguese_Portugal: 'pt-PT',\n  Punjabi: 'pa',\n  Querétaro_Otomi: 'otq',\n  Romanian: 'ro',\n  Russian: 'ru',\n  Samoan: 'sm',\n  Serbian_Cyrillic: 'sr-Cyrl',\n  Serbian_Latin: 'sr-Latn',\n  Slovak: 'sk',\n  Slovenian: 'sl',\n  Somali: 'so',\n  Spanish: 'es',\n  Swahili: 'sw',\n  Swedish: 'sv',\n  Tahitian: 'ty',\n  Tamil: 'ta',\n  Tatar: 'tt',\n  Telugu: 'te',\n  Thai: 'th',\n  Tibetan: 'bo',\n  Tigrinya: 'ti',\n  Tongan: 'to',\n  Turkish: 'tr',\n  Turkmen: 'tk',\n  Ukrainian: 'uk',\n  Upper_Sorbian: 'hsb',\n  Urdu: 'ur',\n  Uyghur: 'ug',\n  Uzbek_Latin: 'uz',\n  Vietnamese: 'vi',\n  Welsh: 'cy',\n  Yucatec_Maya: 'yua',\n  Zulu: 'zu',\n};\n\nexport const DeepLTranslateLanguages: Record<string, string> = {\n  Bulgarian: 'BG',\n  Chinese: 'ZH',\n  Czech: 'CS',\n  Danish: 'DA',\n  Dutch: 'NL',\n  English: 'EN',\n  Estonian: 'ET',\n  Finnish: 'FI',\n  French: 'FR',\n  German: 'DE',\n  Greek: 'EL',\n  Hungarian: 'HU',\n  Indonesian: 'ID',\n  Italian: 'IT',\n  Japanese: 'JA',\n  Korean: 'KO',\n  Latvian: 'LV',\n  Lithuanian: 'LT',\n  Norwegian: 'NB',\n  Polish: 'PL',\n  Portuguese: 'PT',\n  Romanian: 'RO',\n  Russian: 'RU',\n  Slovak: 'SK',\n  Slovenian: 'SL',\n  Spanish: 'ES',\n  Swedish: 'SV',\n  Turkish: 'TR',\n  Ukrainian: 'UK',\n};\n\nexport const LanguageMapping: Record<string, Record<string, string>> = {\n  Automatic: {\n    google: GoogleTranslateLanguages.Automatic,\n    google2: GoogleTranslate2Languages.Automatic,\n    libre: LibreTranslateLanguages.Automatic,\n    argos: ArgosTranslateLanguages.Automatic,\n    bing: BingTranslateLanguages.Automatic,\n  },\n  Afrikaans: {\n    google: GoogleTranslateLanguages.Afrikaans,\n    google2: GoogleTranslateLanguages.Afrikaans,\n    bing: BingTranslateLanguages.Afrikaans,\n  },\n  Albanian: {\n    google: GoogleTranslateLanguages.Albanian,\n    google2: GoogleTranslate2Languages.Albanian,\n    bing: BingTranslateLanguages.Albanian,\n  },\n  Amharic: {\n    google: GoogleTranslateLanguages.Amharic,\n    google2: GoogleTranslate2Languages.Amharic,\n    bing: BingTranslateLanguages.Amharic,\n  },\n  Arabic: {\n    google: GoogleTranslateLanguages.Arabic,\n    google2: GoogleTranslate2Languages.Arabic,\n    libre: LibreTranslateLanguages.Arabic,\n    argos: ArgosTranslateLanguages.Arabic,\n    bing: BingTranslateLanguages.Arabic,\n  },\n  Assamese: {\n    bing: BingTranslateLanguages.Assamese,\n  },\n  Armenian: {\n    google: GoogleTranslateLanguages.Armenian,\n    google2: GoogleTranslate2Languages.Armenian,\n    bing: BingTranslateLanguages.Armenian,\n  },\n  Azerbaijani: {\n    google: GoogleTranslateLanguages.Azerbaijani,\n    google2: GoogleTranslate2Languages.Azerbaijani,\n    libre: LibreTranslateLanguages.Azerbaijani,\n    bing: BingTranslateLanguages.Azerbaijani,\n  },\n  Bashkir: {\n    bing: BingTranslateLanguages.Bashkir,\n  },\n  Basque: {\n    google: GoogleTranslateLanguages.Basque,\n    google2: GoogleTranslate2Languages.Basque,\n    bing: BingTranslateLanguages.Basque,\n  },\n  Belarusian: {\n    google: GoogleTranslateLanguages.Belarusian,\n    google2: GoogleTranslate2Languages.Belarusian,\n  },\n  Bengali: {\n    google: GoogleTranslateLanguages.Bengali,\n    google2: GoogleTranslate2Languages.Bengali,\n    bing: BingTranslateLanguages.Bangla,\n  },\n  Bosnian: {\n    google: GoogleTranslateLanguages.Bosnian,\n    google2: GoogleTranslate2Languages.Bosnian,\n    bing: BingTranslateLanguages.Bosnian,\n  },\n  Bulgarian: {\n    google: GoogleTranslateLanguages.Bulgarian,\n    google2: GoogleTranslate2Languages.Bulgarian,\n    bing: BingTranslateLanguages.Bulgarian,\n    deepl: DeepLTranslateLanguages.Bulgarian,\n  },\n  Cantonese_Traditional: {\n    bing: BingTranslateLanguages.Cantonese_Traditional,\n  },\n  Catalan: {\n    google: GoogleTranslateLanguages.Catalan,\n    google2: GoogleTranslate2Languages.Catalan,\n    bing: BingTranslateLanguages.Catalan,\n  },\n  Cebuano: {\n    google: GoogleTranslateLanguages.Cebuano,\n    google2: GoogleTranslate2Languages.Cebuano,\n  },\n  Chichewa: {\n    google: GoogleTranslateLanguages.Chichewa,\n    google2: GoogleTranslate2Languages.Chichewa,\n  },\n  Chinese_Literary: {\n    bing: BingTranslateLanguages.Chinese_Literary,\n  },\n  Chinese_Simplified: {\n    google: GoogleTranslateLanguages.Chinese_Simplified,\n    google2: GoogleTranslate2Languages.Chinese_Simplified,\n    bing: BingTranslateLanguages.Chinese_Simplified,\n    libre: LibreTranslateLanguages.Chinese,\n    argos: ArgosTranslateLanguages.Chinese,\n    deepl: DeepLTranslateLanguages.Chinese,\n  },\n  Chinese_Traditional: {\n    google: GoogleTranslateLanguages.Chinese_Traditional,\n    google2: GoogleTranslate2Languages.Chinese_Traditional,\n    bing: BingTranslateLanguages.Chinese_Traditional,\n  },\n  Corsican: {\n    google: GoogleTranslateLanguages.Corsican,\n    google2: GoogleTranslate2Languages.Corsican,\n  },\n  Croatian: {\n    google: GoogleTranslateLanguages.Croatian,\n    google2: GoogleTranslate2Languages.Croatian,\n    bing: BingTranslateLanguages.Croatian,\n  },\n  Czech: {\n    google: GoogleTranslateLanguages.Czech,\n    google2: GoogleTranslate2Languages.Czech,\n    bing: BingTranslateLanguages.Czech,\n    libre: LibreTranslateLanguages.Czech,\n    deepl: DeepLTranslateLanguages.Czech,\n  },\n  Danish: {\n    google: GoogleTranslateLanguages.Danish,\n    google2: GoogleTranslate2Languages.Danish,\n    bing: BingTranslateLanguages.Danish,\n    libre: LibreTranslateLanguages.Danish,\n    deepl: DeepLTranslateLanguages.Danish,\n  },\n  Dari: {\n    bing: BingTranslateLanguages.Dari,\n  },\n  Divehi: {\n    bing: BingTranslateLanguages.Divehi,\n  },\n  Dutch: {\n    google: GoogleTranslateLanguages.Dutch,\n    google2: GoogleTranslate2Languages.Dutch,\n    bing: BingTranslateLanguages.Dutch,\n    libre: LibreTranslateLanguages.Dutch,\n    deepl: DeepLTranslateLanguages.Dutch,\n  },\n  English: {\n    google: GoogleTranslateLanguages.English,\n    google2: GoogleTranslate2Languages.English,\n    bing: BingTranslateLanguages.English,\n    libre: LibreTranslateLanguages.English,\n    argos: ArgosTranslateLanguages.English,\n    deepl: DeepLTranslateLanguages.English,\n  },\n  Esperanto: {\n    google: GoogleTranslateLanguages.Esperanto,\n    google2: GoogleTranslate2Languages.Esperanto,\n    libre: LibreTranslateLanguages.Esperanto,\n  },\n  Estonian: {\n    google: GoogleTranslateLanguages.Estonian,\n    google2: GoogleTranslate2Languages.Estonian,\n    bing: BingTranslateLanguages.Estonian,\n    deepl: DeepLTranslateLanguages.Estonian,\n  },\n  Faroese: {\n    bing: BingTranslateLanguages.Faroese,\n  },\n  Fijian: {\n    bing: BingTranslateLanguages.Fijian,\n  },\n  Filipino: {\n    google: GoogleTranslateLanguages.Filipino,\n    google2: GoogleTranslate2Languages.Filipino,\n    bing: BingTranslateLanguages.Filipino,\n  },\n  Finnish: {\n    google: GoogleTranslateLanguages.Finnish,\n    google2: GoogleTranslate2Languages.Finnish,\n    bing: BingTranslateLanguages.Finnish,\n    libre: LibreTranslateLanguages.Finnish,\n    deepl: DeepLTranslateLanguages.Finnish,\n  },\n  French: {\n    google: GoogleTranslateLanguages.French,\n    google2: GoogleTranslate2Languages.French,\n    bing: BingTranslateLanguages.French,\n    libre: LibreTranslateLanguages.French,\n    argos: ArgosTranslateLanguages.French,\n    deepl: DeepLTranslateLanguages.French,\n  },\n  French_Canada: {\n    bing: BingTranslateLanguages.French_Canada,\n  },\n  Frisian: {\n    google: GoogleTranslateLanguages.Frisian,\n    google2: GoogleTranslate2Languages.Frisian,\n  },\n  Galician: {\n    google: GoogleTranslateLanguages.Galician,\n    google2: GoogleTranslate2Languages.Galician,\n    bing: BingTranslateLanguages.Galician,\n  },\n  Georgian: {\n    google: GoogleTranslateLanguages.Georgian,\n    google2: GoogleTranslate2Languages.Georgian,\n    bing: BingTranslateLanguages.Georgian,\n  },\n  German: {\n    google: GoogleTranslateLanguages.German,\n    google2: GoogleTranslate2Languages.German,\n    bing: BingTranslateLanguages.German,\n    libre: LibreTranslateLanguages.German,\n    argos: ArgosTranslateLanguages.German,\n    deepl: DeepLTranslateLanguages.German,\n  },\n  Greek: {\n    google: GoogleTranslateLanguages.Greek,\n    google2: GoogleTranslate2Languages.Greek,\n    bing: BingTranslateLanguages.Greek,\n    libre: LibreTranslateLanguages.Greek,\n    deepl: DeepLTranslateLanguages.Greek,\n  },\n  Gujarati: {\n    google: GoogleTranslateLanguages.Gujarati,\n    google2: GoogleTranslate2Languages.Gujarati,\n    bing: BingTranslateLanguages.Gujarati,\n  },\n  Haitian_Creole: {\n    google: GoogleTranslateLanguages.Haitian_Creole,\n    google2: GoogleTranslate2Languages.Haitian_Creole,\n    bing: BingTranslateLanguages.Haitian_Creole,\n  },\n  Hausa: {\n    google: GoogleTranslateLanguages.Hausa,\n    google2: GoogleTranslate2Languages.Hausa,\n  },\n  Hawaiian: {\n    google: GoogleTranslateLanguages.Hawaiian,\n    google2: GoogleTranslate2Languages.Hawaiian,\n  },\n  Hebrew: {\n    google: GoogleTranslateLanguages.Hebrew,\n    google2: GoogleTranslate2Languages.Hebrew,\n    bing: BingTranslateLanguages.Hebrew,\n    libre: LibreTranslateLanguages.Hebrew,\n  },\n  Hindi: {\n    google: GoogleTranslateLanguages.Hindi,\n    google2: GoogleTranslate2Languages.Hindi,\n    bing: BingTranslateLanguages.Hindi,\n    libre: LibreTranslateLanguages.Hindi,\n    argos: ArgosTranslateLanguages.Hindi,\n  },\n  Hmong: {\n    google: GoogleTranslateLanguages.Hmong,\n    google2: GoogleTranslate2Languages.Hmong,\n    bing: BingTranslateLanguages.Hmong_Daw,\n  },\n  Hungarian: {\n    google: GoogleTranslateLanguages.Hungarian,\n    google2: GoogleTranslate2Languages.Hungarian,\n    bing: BingTranslateLanguages.Hungarian,\n    libre: LibreTranslateLanguages.Hungarian,\n    deepl: DeepLTranslateLanguages.Hungarian,\n  },\n  Icelandic: {\n    google: GoogleTranslateLanguages.Icelandic,\n    google2: GoogleTranslate2Languages.Icelandic,\n    bing: BingTranslateLanguages.Icelandic,\n  },\n  Igbo: {\n    google: GoogleTranslateLanguages.Igbo,\n    google2: GoogleTranslate2Languages.Igbo,\n  },\n  Indonesian: {\n    google: GoogleTranslateLanguages.Indonesian,\n    google2: GoogleTranslate2Languages.Indonesian,\n    bing: BingTranslateLanguages.Indonesian,\n    libre: LibreTranslateLanguages.Indonesian,\n    argos: ArgosTranslateLanguages.Indonesian,\n    deepl: DeepLTranslateLanguages.Indonesian,\n  },\n  Inuinnaqtun: {\n    bing: BingTranslateLanguages.Inuinnaqtun,\n  },\n  Inuktitut: {\n    bing: BingTranslateLanguages.Inuktitut,\n  },\n  Inuktitut_Latin: {\n    bing: BingTranslateLanguages.Inuktitut_Latin,\n  },\n  Irish: {\n    google: GoogleTranslateLanguages.Irish,\n    google2: GoogleTranslate2Languages.Irish,\n    bing: BingTranslateLanguages.Irish,\n    libre: LibreTranslateLanguages.Irish,\n    argos: ArgosTranslateLanguages.Irish,\n  },\n  Italian: {\n    google: GoogleTranslateLanguages.Italian,\n    google2: GoogleTranslate2Languages.Italian,\n    bing: BingTranslateLanguages.Italian,\n    libre: LibreTranslateLanguages.Italian,\n    argos: ArgosTranslateLanguages.Italian,\n    deepl: DeepLTranslateLanguages.Italian,\n  },\n  Japanese: {\n    google: GoogleTranslateLanguages.Japanese,\n    google2: GoogleTranslate2Languages.Japanese,\n    bing: BingTranslateLanguages.Japanese,\n    libre: LibreTranslateLanguages.Japanese,\n    argos: ArgosTranslateLanguages.Japanese,\n    deepl: DeepLTranslateLanguages.Japanese,\n  },\n  Javanese: {\n    google: GoogleTranslateLanguages.Javanese,\n    google2: GoogleTranslate2Languages.Javanese,\n  },\n  Kannada: {\n    google: GoogleTranslateLanguages.Kannada,\n    google2: GoogleTranslate2Languages.Kannada,\n    bing: BingTranslateLanguages.Kannada,\n  },\n  Kazakh: {\n    google: GoogleTranslateLanguages.Kazakh,\n    google2: GoogleTranslate2Languages.Kazakh,\n    bing: BingTranslateLanguages.Kazakh,\n  },\n  Khmer: {\n    google: GoogleTranslateLanguages.Khmer,\n    google2: GoogleTranslate2Languages.Khmer,\n    bing: BingTranslateLanguages.Khmer,\n  },\n  Klingon_Latin: {\n    bing: BingTranslateLanguages.Klingon_Latin,\n  },\n  Korean: {\n    google: GoogleTranslateLanguages.Korean,\n    google2: GoogleTranslate2Languages.Korean,\n    bing: BingTranslateLanguages.Korean,\n    libre: LibreTranslateLanguages.Korean,\n    argos: ArgosTranslateLanguages.Korean,\n    deepl: DeepLTranslateLanguages.Korean,\n  },\n  Kurdish_Kurmanji: {\n    google: GoogleTranslateLanguages.Kurdish_Kurmanji,\n    google2: GoogleTranslate2Languages.Kurdish_Kurmanji,\n    bing: BingTranslateLanguages.Kurdish_Kurmanji,\n  },\n  Kurdish_Northern: {\n    bing: BingTranslateLanguages.Kurdish_Northern,\n  },\n  Kyrgyz: {\n    google: GoogleTranslateLanguages.Kyrgyz,\n    google2: GoogleTranslate2Languages.Kyrgyz,\n    bing: BingTranslateLanguages.Kyrgyz,\n  },\n  Lao: {\n    google: GoogleTranslateLanguages.Lao,\n    google2: GoogleTranslate2Languages.Lao,\n    bing: BingTranslateLanguages.Lao,\n  },\n  Latin: {\n    google: GoogleTranslateLanguages.Latin,\n    google2: GoogleTranslate2Languages.Latin,\n  },\n  Latvian: {\n    google: GoogleTranslateLanguages.Latvian,\n    google2: GoogleTranslate2Languages.Latvian,\n    bing: BingTranslateLanguages.Latvian,\n    deepl: DeepLTranslateLanguages.Latvian,\n  },\n  Lithuanian: {\n    google: GoogleTranslateLanguages.Lithuanian,\n    google2: GoogleTranslate2Languages.Lithuanian,\n    bing: BingTranslateLanguages.Lithuanian,\n    deepl: DeepLTranslateLanguages.Lithuanian,\n  },\n  Luxembourgish: {\n    google: GoogleTranslateLanguages.Luxembourgish,\n    google2: GoogleTranslate2Languages.Luxembourgish,\n  },\n  Macedonian: {\n    google: GoogleTranslateLanguages.Macedonian,\n    google2: GoogleTranslate2Languages.Macedonian,\n    bing: BingTranslateLanguages.Macedonian,\n  },\n  Malagasy: {\n    google: GoogleTranslateLanguages.Malagasy,\n    google2: GoogleTranslate2Languages.Malagasy,\n    bing: BingTranslateLanguages.Malagasy,\n  },\n  Malay: {\n    google: GoogleTranslateLanguages.Malay,\n    google2: GoogleTranslate2Languages.Malay,\n    bing: BingTranslateLanguages.Malay,\n  },\n  Malayalam: {\n    google: GoogleTranslateLanguages.Malayalam,\n    google2: GoogleTranslate2Languages.Malayalam,\n    bing: BingTranslateLanguages.Malayalam,\n  },\n  Maltese: {\n    google: GoogleTranslateLanguages.Maltese,\n    google2: GoogleTranslate2Languages.Maltese,\n    bing: BingTranslateLanguages.Maltese,\n  },\n  Maori: {\n    google: GoogleTranslateLanguages.Maori,\n    google2: GoogleTranslate2Languages.Maori,\n    bing: BingTranslateLanguages.Māori,\n  },\n  Marathi: {\n    google: GoogleTranslateLanguages.Marathi,\n    google2: GoogleTranslate2Languages.Marathi,\n    bing: BingTranslateLanguages.Marathi,\n  },\n  Mongolian: {\n    google: GoogleTranslateLanguages.Marathi,\n    google2: GoogleTranslate2Languages.Marathi,\n    bing: BingTranslateLanguages.Mongolian_Traditional,\n  },\n  Mongolian_Cyrillic: {\n    bing: BingTranslateLanguages.Mongolian_Cyrillic,\n  },\n  Myanmar_Burmese: {\n    google: GoogleTranslateLanguages.Myanmar_Burmese,\n    google2: GoogleTranslate2Languages.Myanmar_Burmese,\n    bing: BingTranslateLanguages.Myanmar_Burmese,\n  },\n  Nepali: {\n    google: GoogleTranslateLanguages.Nepali,\n    google2: GoogleTranslate2Languages.Nepali,\n    bing: BingTranslateLanguages.Nepali,\n  },\n  Norwegian: {\n    google: GoogleTranslateLanguages.Norwegian,\n    google2: GoogleTranslate2Languages.Norwegian,\n    bing: BingTranslateLanguages.Norwegian,\n    deepl: DeepLTranslateLanguages.Norwegian,\n  },\n  Odia: {\n    bing: BingTranslateLanguages.Odia,\n  },\n  Pashto: {\n    google: GoogleTranslateLanguages.Pashto,\n    google2: GoogleTranslate2Languages.Pashto,\n    bing: BingTranslateLanguages.Pashto,\n  },\n  Persian: {\n    google: GoogleTranslateLanguages.Persian,\n    google2: GoogleTranslate2Languages.Persian,\n    bing: BingTranslateLanguages.Persian,\n    libre: LibreTranslateLanguages.Persian,\n  },\n  Polish: {\n    google: GoogleTranslateLanguages.Polish,\n    google2: GoogleTranslate2Languages.Polish,\n    bing: BingTranslateLanguages.Polish,\n    libre: LibreTranslateLanguages.Polish,\n    argos: ArgosTranslateLanguages.Polish,\n    deepl: DeepLTranslateLanguages.Polish,\n  },\n  Portuguese: {\n    google: GoogleTranslateLanguages.Portuguese,\n    google2: GoogleTranslate2Languages.Portuguese,\n    bing: BingTranslateLanguages.Portuguese_Portugal,\n    libre: LibreTranslateLanguages.Portuguese,\n    argos: ArgosTranslateLanguages.Portuguese,\n    deepl: DeepLTranslateLanguages.Portuguese,\n  },\n  Portuguese_Brazil: {\n    bing: BingTranslateLanguages.Portuguese_Brazil,\n  },\n  Punjabi: {\n    google: GoogleTranslateLanguages.Punjabi,\n    google2: GoogleTranslate2Languages.Punjabi,\n    bing: BingTranslateLanguages.Punjabi,\n  },\n  Querétaro_Otomi: {\n    bing: BingTranslateLanguages.Querétaro_Otomi,\n  },\n  Romanian: {\n    google: GoogleTranslateLanguages.Romanian,\n    google2: GoogleTranslate2Languages.Romanian,\n    bing: BingTranslateLanguages.Romanian,\n    deepl: DeepLTranslateLanguages.Romanian,\n  },\n  Russian: {\n    google: GoogleTranslateLanguages.Russian,\n    google2: GoogleTranslate2Languages.Russian,\n    bing: BingTranslateLanguages.Russian,\n    libre: LibreTranslateLanguages.Russian,\n    argos: ArgosTranslateLanguages.Russian,\n    deepl: DeepLTranslateLanguages.Russian,\n  },\n  Samoan: {\n    google: GoogleTranslateLanguages.Samoan,\n    google2: GoogleTranslate2Languages.Samoan,\n    bing: BingTranslateLanguages.Samoan,\n  },\n  Scots_Gaelic: {\n    google: GoogleTranslateLanguages.Scots_Gaelic,\n    google2: GoogleTranslate2Languages.Scots_Gaelic,\n  },\n  Serbian: {\n    google: GoogleTranslateLanguages.Serbian,\n    google2: GoogleTranslate2Languages.Serbian,\n    bing: BingTranslateLanguages.Serbian_Latin,\n  },\n  Serbian_Cyrillic: {\n    bing: BingTranslateLanguages.Serbian_Cyrillic,\n  },\n  Sesotho: {\n    google: GoogleTranslateLanguages.Sesotho,\n    google2: GoogleTranslate2Languages.Sesotho,\n  },\n  Shona: {\n    google: GoogleTranslateLanguages.Shona,\n    google2: GoogleTranslate2Languages.Shona,\n  },\n  Sindhi: {\n    google: GoogleTranslateLanguages.Sindhi,\n    google2: GoogleTranslate2Languages.Sindhi,\n  },\n  Sinhala: {\n    google: GoogleTranslateLanguages.Sinhala,\n    google2: GoogleTranslate2Languages.Sinhala,\n  },\n  Slovak: {\n    google: GoogleTranslateLanguages.Slovak,\n    google2: GoogleTranslate2Languages.Slovak,\n    bing: BingTranslateLanguages.Slovak,\n    libre: LibreTranslateLanguages.Slovak,\n    deepl: DeepLTranslateLanguages.Slovak,\n  },\n  Slovenian: {\n    google: GoogleTranslateLanguages.Slovenian,\n    google2: GoogleTranslate2Languages.Slovenian,\n    bing: BingTranslateLanguages.Slovenian,\n    deepl: DeepLTranslateLanguages.Slovenian,\n  },\n  Somali: {\n    google: GoogleTranslateLanguages.Somali,\n    google2: GoogleTranslate2Languages.Somali,\n    bing: BingTranslateLanguages.Somali,\n  },\n  Spanish: {\n    google: GoogleTranslateLanguages.Spanish,\n    google2: GoogleTranslate2Languages.Spanish,\n    bing: BingTranslateLanguages.Spanish,\n    libre: LibreTranslateLanguages.Spanish,\n    argos: ArgosTranslateLanguages.Spanish,\n    deepl: DeepLTranslateLanguages.Spanish,\n  },\n  Sundanese: {\n    google: GoogleTranslateLanguages.Sundanese,\n    google2: GoogleTranslate2Languages.Sundanese,\n  },\n  Swahili: {\n    google: GoogleTranslateLanguages.Swahili,\n    google2: GoogleTranslate2Languages.Swahili,\n    bing: BingTranslateLanguages.Swahili,\n  },\n  Swedish: {\n    google: GoogleTranslateLanguages.Swedish,\n    google2: GoogleTranslate2Languages.Swedish,\n    bing: BingTranslateLanguages.Swedish,\n    libre: LibreTranslateLanguages.Swedish,\n    deepl: DeepLTranslateLanguages.Swedish,\n  },\n  Tahitian: {\n    bing: BingTranslateLanguages.Tahitian,\n  },\n  Tajik: {\n    google: GoogleTranslateLanguages.Tajik,\n    google2: GoogleTranslate2Languages.Tajik,\n  },\n  Tamil: {\n    google: GoogleTranslateLanguages.Tamil,\n    google2: GoogleTranslate2Languages.Tamil,\n    bing: BingTranslateLanguages.Tamil,\n  },\n  Tatar: {\n    bing: BingTranslateLanguages.Tatar,\n  },\n  Telugu: {\n    google: GoogleTranslateLanguages.Telugu,\n    google2: GoogleTranslate2Languages.Telugu,\n    bing: BingTranslateLanguages.Telugu,\n  },\n  Thai: {\n    google: GoogleTranslateLanguages.Thai,\n    google2: GoogleTranslate2Languages.Thai,\n    bing: BingTranslateLanguages.Thai,\n  },\n  Tibetan: {\n    bing: BingTranslateLanguages.Tibetan,\n  },\n  Tigrinya: {\n    bing: BingTranslateLanguages.Tigrinya,\n  },\n  Tongan: {\n    bing: BingTranslateLanguages.Tongan,\n  },\n  Turkish: {\n    google: GoogleTranslateLanguages.Turkish,\n    google2: GoogleTranslate2Languages.Turkish,\n    bing: BingTranslateLanguages.Turkish,\n    libre: LibreTranslateLanguages.Turkish,\n    argos: ArgosTranslateLanguages.Turkish,\n    deepl: DeepLTranslateLanguages.Turkish,\n  },\n  Turkmen: {\n    bing: BingTranslateLanguages.Turkmen,\n  },\n  Ukrainian: {\n    google: GoogleTranslateLanguages.Ukrainian,\n    google2: GoogleTranslate2Languages.Ukrainian,\n    bing: BingTranslateLanguages.Ukrainian,\n    libre: LibreTranslateLanguages.Ukrainian,\n    deepl: DeepLTranslateLanguages.Ukrainian,\n  },\n  Upper_Sorbian: {\n    bing: BingTranslateLanguages.Upper_Sorbian,\n  },\n  Urdu: {\n    google: GoogleTranslateLanguages.Urdu,\n    google2: GoogleTranslate2Languages.Urdu,\n    bing: BingTranslateLanguages.Urdu,\n  },\n  Uyghur: {\n    bing: BingTranslateLanguages.Uyghur,\n  },\n  Uzbek: {\n    google: GoogleTranslateLanguages.Uzbek,\n    google2: GoogleTranslate2Languages.Uzbek,\n    bing: BingTranslateLanguages.Uzbek_Latin,\n  },\n  Vietnamese: {\n    google: GoogleTranslateLanguages.Vietnamese,\n    google2: GoogleTranslate2Languages.Vietnamese,\n    bing: BingTranslateLanguages.Vietnamese,\n    argos: ArgosTranslateLanguages.Vietnamese,\n  },\n  Welsh: {\n    google: GoogleTranslateLanguages.Welsh,\n    google2: GoogleTranslate2Languages.Welsh,\n    bing: BingTranslateLanguages.Welsh,\n  },\n  Xhosa: {\n    google: GoogleTranslateLanguages.Xhosa,\n    google2: GoogleTranslate2Languages.Xhosa,\n  },\n  Yiddish: {\n    google: GoogleTranslateLanguages.Yiddish,\n    google2: GoogleTranslate2Languages.Yiddish,\n  },\n  Yoruba: {\n    google: GoogleTranslateLanguages.Yoruba,\n    google2: GoogleTranslate2Languages.Yoruba,\n  },\n  Yucatec_Maya: {\n    bing: BingTranslateLanguages.Yucatec_Maya,\n  },\n  Zulu: {\n    google: GoogleTranslateLanguages.Zulu,\n    google2: GoogleTranslate2Languages.Zulu,\n    bing: BingTranslateLanguages.Zulu,\n  },\n};\n","import { translationModuleKeys } from '../modules/helpers';\nimport { current_version, fallbacks } from './micro';\nvar figlet = require('figlet');\n\nconst cli_name = 'jsontt';\n\nconst default_color = '\\x1b[0m';\nconst success_color = '\\x1b[32m';\nconst error_color = '\\x1b[31m';\nconst info_color = '\\x1b[34m';\nconst warn_color = '\\x1b[33m';\n\nexport function success(message: string) {\n  console.log(success_color, `${message}`, default_color);\n}\n\nexport function error(message: string) {\n  console.log(error_color, `${message}`, default_color);\n}\n\nexport function info(message: string) {\n  console.log(info_color, `${message}`, default_color);\n}\n\nexport function warn(message: string) {\n  console.log(warn_color, `${message}`, default_color);\n}\n\nexport const commands = {\n  help1: '--help',\n  help2: '-h',\n};\n\nexport const supportedLanguagesUrl = `\\nsupported Languages: ${info_color}https://github.com/mololab/json-translator/blob/master/docs/LANGUAGES.md${default_color}\\n`;\n\nexport const messages = {\n  cli: {\n    // cli general messages\n    welcome: `\\n${warn_color}Sponsored by Moniesto - Bridge between Traders and Investors in Crypto \\nhttps://moniesto.com  \\n\\n${default_color}Welcome to the\\n${success_color +\n      figlet.textSync(\n        'jsontt'\n      )}${default_color}\\n\\t\\t\\t\\tcli ${current_version}\\n`,\n    description:\n      'This CLI will provide you the ability to translate your JSON/YAML files or JSON objects into different languages for free.',\n    usage: `<your/path/to/file.json>`,\n    usage_with_proxy: `Usage with proxy list file (only supported for Google module): ${cli_name} <your/path/to/file.json> <your/path/to/proxy_list.txt>`,\n    usage_by_ops: `Usage with options: ${cli_name} <your/path/to/file.json> --module <TranslationModules> --from <Language> --to <Languages...>`,\n    paths:\n      'required json file path <path/file.json> or json file with proxy list txt file path <your/path/to/file.json> <your/path/to/proxy_list.txt>',\n\n    // cli usage messages\n    module: 'specify translation module | e.g., -m google',\n    from: 'from language | e.g., -f en',\n    to: 'to translates | e.g., -t ar fr zh-CN',\n    new_file_name: 'optional ↵ | output filename | e.g., -n myApp',\n    fallback:\n      'optional ↵ | fallback logic, try other translation modules on fail | yes, no | default: no | e.g., -f yes',\n    concurrency_limit:\n      'optional ↵ | set max concurrency limit (higher faster, but easy to get banned) | default: 3 | e.g., -cl 5',\n\n    // cli prompt messages\n    select_module_message: 'Select translation module:',\n    from_message: 'From which language?',\n    to_message:\n      'To which language | languages? (Can select more than one with space bar)',\n    new_file_name_message: 'optional ↵ | Output filename',\n    fallback_message:\n      'optional ↵ | fallback logic, try other translation modules when fail | yes, no | default: no',\n    concurrency_limit_message:\n      'optional ↵ | set max concurrency limit (higher faster, but easy to get banned) | default: 3',\n\n    // fail messages\n    module_not_available: `module is not available. (choices : ${translationModuleKeys})`,\n    from_not_available: `translate language from is not available\\n${supportedLanguagesUrl}`,\n    to_not_available: `languages to translate into is not available\\n${supportedLanguagesUrl}`,\n    no_selected_language:\n      'You didn`t select any language. Please try it again and select languages with the space bar.',\n    fallback_not_available: `fallback input is not available. (choices : ${Object.keys(\n      fallbacks\n    )})`,\n    proxy_file_notValid_or_not_empty_options: `\n    - Please ensure that the value for the option \"-m, --module <Translation>\" is compatible\n    - Please ensure that the value for the option \"-f, --from <Language>\" is compatible\n    - nPlease ensure that the value for the option \"-t, --to <Languages...>\" is compatible\n    - Please ensure that the value for the option \"-n, --name <string>\" is valid\n    - Please ensure that the value for the option \"-f, --fallback <string>\" is valid\n    - Please ensure that the value for the option \"-cl, --concurrencylimit <number>\" is valid\n    - Please make sure to provide a valid path for the proxy list file at \"<your/path/to/proxy_list.txt>\".\n    `,\n\n    // success messages\n    creation_done:\n      'All files are created! You can find them in the same folder as the original file.',\n  },\n  object: {},\n  file: {\n    no_path: `The path is not provided.`,\n    no_file_in_path: `Could not find the file in the path.`,\n    cannot_translate: `Could not translate the file.`,\n    cannot_save_file: `Could not save the file.`,\n  },\n};\n","import { translate } from '@vitalets/google-translate-api';\nimport * as bingTranslator from 'bing-translate-api';\nimport createHttpProxyAgent from 'http-proxy-agent';\nimport axios from 'axios';\nimport { safeValueTransition } from './helpers';\nimport { warn } from '../utils/console';\nimport translate2 from '@iamtraction/google-translate';\n\nexport async function translateWithLibre(\n  str: string,\n  from: string,\n  to: string\n): Promise<string> {\n  let body = {\n    q: safeValueTransition(str),\n    source: from,\n    target: to,\n    format: 'text',\n    api_key: '',\n    secret: 'YK4VRVW',\n  };\n\n  const { data } = await axios.post(\n    'https://libretranslate.com/translate',\n    body,\n    {\n      headers: {\n        Origin: 'https://libretranslate.com',\n      },\n    }\n  );\n\n  return data.translatedText;\n}\n\nexport async function translateWithArgos(\n  str: string,\n  from: string,\n  to: string\n): Promise<string> {\n  let body = {\n    q: safeValueTransition(str),\n    source: from,\n    target: to,\n  };\n\n  const { data } = await axios.post(\n    'https://translate.argosopentech.com/translate',\n    body,\n    {\n      headers: {\n        Origin: 'https://translate.argosopentech.com',\n        Referer: 'https://translate.argosopentech.com',\n      },\n    }\n  );\n\n  return data.translatedText;\n}\n\nexport async function translateWithBing(\n  str: string,\n  from: string,\n  to: string\n): Promise<string> {\n  const { translation } = await bingTranslator.translate(\n    safeValueTransition(str),\n    from,\n    to,\n    false\n  );\n\n  return translation;\n}\n\nexport async function translateWithGoogle(\n  str: string,\n  from: string,\n  to: string\n): Promise<string> {\n  // step: if proxy list provided\n  if (\n    global.proxyList &&\n    global.proxyList.length > 0 &&\n    global.proxyIndex !== -1\n  ) {\n    let proxy = global.proxyList[global.proxyIndex];\n\n    // step: new proxy exist\n    if (proxy) {\n      let agent = createHttpProxyAgent(`http://${proxy}`);\n\n      let translatedStr = await translateWithGoogleByProxySupport(\n        str,\n        from,\n        to,\n        {\n          agent,\n          timeout: 4000,\n        }\n      );\n\n      return translatedStr;\n    } else {\n      warn('No new proxy exists, continuing without proxy');\n      global.proxyIndex = -1;\n\n      let translatedStr = await translateWithGoogleByProxySupport(\n        str,\n        from,\n        to\n      );\n\n      return translatedStr;\n    }\n  } else {\n    // step: translate without proxy\n    let translatedStr = await translateWithGoogleByProxySupport(str, from, to);\n\n    return translatedStr;\n  }\n}\n\nasync function translateWithGoogleByProxySupport(\n  str: string,\n  from: string,\n  to: string,\n  options?: { agent: any; timeout: number }\n) {\n  const { text } = await translate(safeValueTransition(str), {\n    from: from,\n    to: to,\n    fetchOptions: { agent: options !== undefined ? options.agent : undefined },\n  });\n\n  return text;\n}\n\nexport async function translateWithDeepL(\n  str: string,\n  from: string,\n  to: string\n): Promise<string> {\n  const DEEPL_API_KEY = process.env.DEEPL_API_KEY;\n  if (!DEEPL_API_KEY)\n    throw new Error('process.env.DEEPL_API_KEY is not defined');\n  const body = {\n    text: [safeValueTransition(str)],\n    target_lang: to,\n    source_lang: from,\n  };\n\n  const { data } = await axios.post(\n    'https://api-free.deepl.com/v2/translate',\n    body,\n    {\n      headers: {\n        Authorization: `DeepL-Auth-Key ${DEEPL_API_KEY}`,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  return data.translations[0].text;\n}\n\nexport async function translateWithGoogle2(\n  str: string,\n  from: string,\n  to: string\n) {\n  const response = await translate2(str, { from: from, to: to });\n\n  return response.text;\n}\n","import { default_value, translation_value_limit } from '../utils/micro';\nimport { LanguageMapping } from './languages';\nimport { TranslationModule, TranslationModules } from './modules';\n\nexport function safeValueTransition(value: string) {\n  const value_safety: ValueSafety = valueIsSafe(value);\n\n  if (value_safety.is_safe === true) {\n    return value;\n  }\n\n  switch (value_safety.type) {\n    case nonSafeTypes.null:\n    case nonSafeTypes.undefined:\n    case nonSafeTypes.empty:\n      value = default_value;\n      break;\n    case nonSafeTypes.long:\n      value = value.substring(0, translation_value_limit);\n      break;\n  }\n\n  return value;\n}\n\nfunction valueIsSafe(value: string): ValueSafety {\n  let result: ValueSafety = {\n    is_safe: true,\n    type: undefined,\n  };\n\n  if (value === undefined) {\n    result.is_safe = false;\n    result['type'] = nonSafeTypes.undefined;\n\n    return result;\n  }\n\n  if (value === null) {\n    result.is_safe = false;\n    result['type'] = nonSafeTypes.null;\n\n    return result;\n  }\n\n  if (value.length >= translation_value_limit) {\n    result.is_safe = false;\n    result['type'] = nonSafeTypes.long;\n\n    return result;\n  }\n\n  if (value === '') {\n    result.is_safe = false;\n    result['type'] = nonSafeTypes.empty;\n\n    return result;\n  }\n\n  return result;\n}\n\ninterface ValueSafety {\n  is_safe: boolean;\n  type: nonSafeTypes | undefined;\n}\n\nenum nonSafeTypes {\n  'long',\n  'undefined',\n  'null',\n  'empty',\n}\n\nexport function translationModuleKeys(): string[] {\n  return Object.keys(TranslationModules);\n}\n\nexport function getTranslationModuleByKey(key: string): TranslationModule {\n  return TranslationModules[key];\n}\n\nexport function getLanguageKeyFromValue(\n  value: string,\n  languages: Record<string, string>\n): string | undefined {\n  return Object.keys(languages).find(key => languages[key] === value);\n}\n\nexport function getLanguageValues(languages: Record<string, string>): string[] {\n  return Object.values(languages);\n}\n\nexport function getLanguageVariant(\n  source: string,\n  sourceValue: string,\n  destination: string\n): string | undefined {\n  let destinationValue: string | undefined = undefined;\n\n  for (let key of Object.keys(LanguageMapping)) {\n    if (\n      LanguageMapping[key][source] !== undefined &&\n      LanguageMapping[key][source] === sourceValue &&\n      LanguageMapping[key][destination] !== undefined\n    ) {\n      destinationValue = LanguageMapping[key][destination];\n      break;\n    }\n  }\n\n  return destinationValue;\n}\n","import {\n  translateWithGoogle,\n  translateWithBing,\n  translateWithLibre,\n  translateWithArgos,\n  translateWithDeepL,\n  translateWithGoogle2,\n} from './functions';\nimport {\n  GoogleTranslateLanguages,\n  BingTranslateLanguages,\n  LibreTranslateLanguages,\n  ArgosTranslateLanguages,\n  DeepLTranslateLanguages,\n  GoogleTranslate2Languages,\n} from './languages';\n\nexport type TranslationModules = {\n  [key: string]: TranslationModule;\n};\n\nexport type TranslationConfig = {\n  moduleKey: string;\n  TranslationModule: TranslationModule;\n  concurrencyLimit: number;\n  fallback: boolean;\n};\n\nexport interface TranslationModule {\n  name: string;\n  altName: string;\n  languages: Record<string, string>;\n  requirements?: string[];\n  init?: Function;\n  translate: Function;\n  onComplete?: Function;\n}\n\nexport const TranslationModules: TranslationModules = {\n  google: {\n    name: 'Google Translate',\n    altName: `[FREE] Google Translate (104 languages)`,\n    languages: GoogleTranslateLanguages,\n    translate: translateWithGoogle,\n  },\n  google2: {\n    name: 'Google Translate 2',\n    altName: `[FREE] Google Translate 2 (104 languages)`,\n    languages: GoogleTranslate2Languages,\n    translate: translateWithGoogle2,\n  },\n  bing: {\n    name: 'Bing Translate',\n    altName: '[FREE] Bing Microsoft Translate (110 languages)',\n    languages: BingTranslateLanguages,\n    translate: translateWithBing,\n  },\n  libre: {\n    name: 'Libre Translate',\n    altName: `[FREE] Libre Translate (29 languages)`,\n    languages: LibreTranslateLanguages,\n    translate: translateWithLibre,\n  },\n  argos: {\n    name: 'Argos Translate',\n    altName: `[FREE] Argos Translate (17 languages)`,\n    languages: ArgosTranslateLanguages,\n    translate: translateWithArgos,\n  },\n  deepl: {\n    name: 'DeepL Translate',\n    altName: 'DeepL Translate (29 languages) \\x1b[33m**NEW**\\x1b[0m',\n    requirements: ['\"DEEPL_API_KEY\" as env'],\n    languages: DeepLTranslateLanguages,\n    translate: translateWithDeepL,\n  },\n};\n","/**\n *\n * @param objectPath path to file\n * @returns File extension without leading \".\" (\"yml\" or \"yaml\")\n */\nexport const matchYamlExt = (objectPath: string) =>\n  objectPath.match(/\\.(ya?ml)$/)?.[1];\n","import * as fs from 'fs/promises';\nimport * as YAML from 'yaml';\nimport { matchYamlExt } from '../utils/yaml';\nimport { error, messages } from '../utils/console';\n\nexport async function getFile(objectPath: string) {\n  let json_file: any = undefined;\n\n  await fs\n    .readFile(objectPath, 'utf8')\n    .then(data => {\n      // This function should return a string with JSON-encoded data.\n      // To preserve the contract, YAML files should be parsed to object\n      // and then stringified to JSON string.\n      json_file = matchYamlExt(objectPath)\n        ? JSON.stringify(YAML.parse(data))\n        : data;\n    })\n    .catch(_ => {\n      json_file = undefined;\n    });\n\n  return json_file;\n}\n\nexport function getRootFolder(path: string) {\n  let arr = path.split('/');\n  arr.pop();\n\n  let root = arr.join('/');\n\n  if (root === undefined || root === '') {\n    root = './';\n  }\n\n  return root;\n}\n\nexport async function saveFilePublic(path: string, data: any) {\n  // When path extension is for YAML file, then stringify with YAML encoder.\n  // Otherwise, default JSON encoder is used.\n  var json = matchYamlExt(path) ? YAML.stringify(data) : JSON.stringify(data);\n\n  await fs\n    .writeFile(path, json, 'utf8')\n    .then(_ => {})\n    .catch(_ => {\n      error(messages.file.cannot_save_file);\n    });\n}\n","export function map(\n  str: string\n): {\n  word: string;\n  double_brackets_map: { [key: string]: string };\n  single_brackets_map: { [key: string]: string };\n} {\n  // encode urls if exists in the str\n  str = urlEncoder(str);\n\n  let {\n    map: double_brackets_map,\n    word: initial_ignored_word,\n  } = mapByDoubleBracket(str);\n  let { map: single_brackets_map, word: ignored_word } = mapBySingleBracket(\n    initial_ignored_word\n  );\n\n  return {\n    word: ignored_word,\n    double_brackets_map,\n    single_brackets_map: single_brackets_map,\n  };\n}\n\nexport function unMap(\n  str: string,\n  double_brackets_map: object,\n  single_brackets_map: object\n): string {\n  let word = unmapBySingleBracket(str, single_brackets_map);\n  word = unmapByDoubleBracket(word, double_brackets_map);\n\n  // decode urls if exists in the str\n  word = urlDecoder(word);\n\n  return word;\n}\n\nfunction mapBySingleBracket(\n  str: string\n): { word: string; map: { [key: string]: string } } {\n  return mapIgnoredValues(str, '{', '}', '{', '}');\n}\n\nfunction unmapBySingleBracket(str: string, map: object): string {\n  return unmapIgnoredValues(str, map, '{', '}', '{', '}');\n}\n\nfunction mapByDoubleBracket(\n  str: string\n): { word: string; map: { [key: string]: string } } {\n  return mapIgnoredValues(str, '{{', '}}', '{', '}');\n}\n\nfunction unmapByDoubleBracket(str: string, map: object): string {\n  return unmapIgnoredValues(str, map, '{{', '}}', '{', '}');\n}\n\nfunction mapIgnoredValues(\n  str: string,\n  start: string,\n  end: string,\n  replaced_start: string,\n  replaced_end: string\n): { word: string; map: { [key: string]: string } } {\n  let counter = 0;\n  let map: { [key: string]: string } = {};\n\n  let regex = new RegExp(`${start}(.*?)${end}`, 'g');\n\n  let new_str = str.replace(regex, function(word) {\n    word = word.substring(start.length, word.length - end.length);\n\n    // const key = \"*\".repeat(counter)\n    const key = counter;\n\n    map[`${key}`] = word;\n\n    let locked_ignored = replaced_start + key + replaced_end;\n\n    counter++;\n    return locked_ignored;\n  });\n\n  return { word: new_str, map: map };\n}\n\nfunction unmapIgnoredValues(\n  str: string,\n  map: object,\n  start: string,\n  end: string,\n  replaced_start: string,\n  replaced_end: string\n): string {\n  for (const [key, value] of Object.entries(map)) {\n    let for_replace = replaced_start + key + replaced_end;\n\n    str = str.replace(for_replace, start + value + end);\n  }\n\n  return str;\n}\n\n// URL detector & encode AND decoder\nfunction urlEncoder(text: string): string {\n  // url finder regex => url\n  const regex = /(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!;:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])/gim;\n\n  let new_text = text.replace(regex, function(url) {\n    url = `{` + url + `}`;\n    return url;\n  });\n\n  return new_text;\n}\n\nfunction urlDecoder(text: string): string {\n  // url finder regex => {url}\n  const regex = /{(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.)(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[-A-Z0-9+&@#\\/%=~_|$?!;:,.])*(?:\\([-A-Z0-9+&@#\\/%=~_|$?!;:,.]*\\)|[A-Z0-9+&@#\\/%=~_|$])}/gim;\n\n  let new_text = text.replace(regex, function(url) {\n    url = url.substring(1, url.length - 1);\n    return url;\n  });\n\n  return new_text;\n}\n","import {\n  getLanguageVariant,\n  getTranslationModuleByKey,\n  translationModuleKeys,\n} from '../modules/helpers';\nimport { TranslationConfig } from '../modules/modules';\nimport { warn } from '../utils/console';\nimport { default_value } from '../utils/micro';\nimport * as ignorer from './ignorer';\n\nexport async function plaintranslate(\n  TranslationConfig: TranslationConfig,\n  str: string,\n  from: string,\n  to: string,\n  skipModuleKeys: string[]\n): Promise<string> {\n  // step: map the subset of string need to be ignored\n  let {\n    word: ignored_str,\n    double_brackets_map,\n    single_brackets_map,\n  } = ignorer.map(str);\n\n  // step: translate in try-catch to keep continuity\n  try {\n    // step: translate with proper source\n    let translatedStr = await TranslationConfig.TranslationModule.translate(\n      ignored_str,\n      from,\n      to\n    );\n\n    // step: put ignored values back\n    translatedStr = ignorer.unMap(\n      translatedStr,\n      double_brackets_map,\n      single_brackets_map\n    );\n\n    global.totalTranslated = global.totalTranslated + 1;\n\n    return translatedStr;\n  } catch (e) {\n    // error case\n    const clonedTranslationConfig = Object.assign({}, TranslationConfig); // cloning to escape ref value\n    const clonedSkipModuleKeys = Object.assign([], skipModuleKeys); // cloning to escape ref value\n\n    clonedSkipModuleKeys.push(clonedTranslationConfig.moduleKey);\n\n    const { newModuleKey, newFrom, newTo } = newTranslationModule(\n      clonedTranslationConfig.moduleKey,\n      clonedSkipModuleKeys,\n      from,\n      to\n    );\n\n    let stop: boolean =\n      !clonedTranslationConfig.fallback || newModuleKey === undefined;\n\n    if (stop) {\n      warn(\n        `\\nerror while translating \"${str}\" using ${clonedTranslationConfig.moduleKey}. Assigned \"--\" instead of exit from cli.`\n      );\n\n      global.totalTranslated = global.totalTranslated + 1;\n\n      return default_value;\n    }\n\n    warn(\n      `\\nerror while translating \"${str}\" using ${clonedTranslationConfig.moduleKey}. Tried: ${clonedSkipModuleKeys}. Trying ${newModuleKey}.`\n    );\n\n    // update the TranslationModule for next try\n    clonedTranslationConfig.TranslationModule = getTranslationModuleByKey(\n      newModuleKey as string\n    );\n    clonedTranslationConfig.moduleKey = newModuleKey as string;\n\n    return plaintranslate(\n      clonedTranslationConfig,\n      str,\n      newFrom as string,\n      newTo as string,\n      clonedSkipModuleKeys\n    );\n  }\n}\n\nfunction newTranslationModule(\n  sourceModuleKeys: string,\n  skipModuleKeys: string[],\n  from: string,\n  to: string\n) {\n  const default_data = {\n    newModuleKey: undefined,\n    newFrom: undefined,\n    newTo: undefined,\n  };\n\n  const allModuleKeys: string[] = translationModuleKeys();\n\n  const result: string[] = allModuleKeys.filter(\n    item => !skipModuleKeys.includes(item)\n  );\n\n  let newModuleKey = result[0];\n\n  if (!newModuleKey) {\n    return default_data; // default\n  }\n\n  let newFrom = getLanguageVariant(sourceModuleKeys, from, newModuleKey);\n  let newTo = getLanguageVariant(sourceModuleKeys, to, newModuleKey);\n\n  if (!newFrom || !newTo) {\n    return default_data; // default\n  }\n\n  // has valid newModuleKey & from & to\n  return {\n    newModuleKey,\n    newFrom,\n    newTo,\n  };\n}\n","import { translatedObject } from '..';\nimport { plaintranslate } from './translator';\nimport { TaskQueue } from 'cwait';\nimport { Promise as bluebirdPromise } from 'bluebird';\nimport { TranslationConfig } from '../modules/modules';\nimport { default_concurrency_limit } from '../utils/micro';\n\nvar queue = new TaskQueue(bluebirdPromise, default_concurrency_limit);\n\nexport async function objectTranslator(\n  TranslationConfig: TranslationConfig,\n  object: translatedObject,\n  from: string,\n  to: string[]\n): Promise<translatedObject[]> {\n  queue.concurrency = TranslationConfig.concurrencyLimit;\n\n  if (object && from && to) {\n    let generalObject: translatedObject[] | null[] = [];\n\n    await Promise.all(\n      Object.keys(to).map(async function(index) {\n        const indexAsNum = Number(index);\n        const copyObject = JSON.parse(JSON.stringify(object));\n\n        generalObject[indexAsNum] = await deepDiver(\n          TranslationConfig,\n          copyObject,\n          from,\n          to[indexAsNum]\n        );\n      })\n    );\n\n    return generalObject as translatedObject[];\n  } else {\n    throw new Error(\n      `Undefined values detected. Available ones: object: ${!!object}, from: ${!!from}, to: ${!!to}`\n    );\n  }\n}\n\nexport async function deepDiver(\n  TranslationConfig: TranslationConfig,\n  object: translatedObject,\n  from: string,\n  to: string\n): Promise<translatedObject | null> {\n  var has = Object.prototype.hasOwnProperty.bind(object);\n\n  if (object === null) {\n    return null;\n  }\n\n  await Promise.all(\n    Object.keys(object).map(async function(k) {\n      if (has(k)) {\n        switch (typeof object[k]) {\n          case 'object':\n            await deepDiver(TranslationConfig, object[k], from, to);\n            break;\n          case 'string':\n            global.totalTranslation = global.totalTranslation + 1;\n\n            return queue.add(async () => {\n              return await plaintranslate(\n                TranslationConfig,\n                object[k],\n                from,\n                to,\n                []\n              )\n                .then(data => {\n                  object[k] = data;\n                })\n                .catch(err => {\n                  // TODO: return error\n                  console.log('Translation error:', err);\n                });\n            });\n        }\n      }\n    })\n  );\n\n  return object;\n}\n","import { translatedObject } from '..';\nimport { error, messages, success } from '../utils/console';\nimport { getFile, getRootFolder, saveFilePublic } from './core';\nimport { objectTranslator } from './json_object';\nimport { matchYamlExt } from '../utils/yaml';\nimport { TranslationConfig } from '../modules/modules';\nimport { getLanguageKeyFromValue } from '../modules/helpers';\n\nexport async function fileTranslator(\n  TranslationConfig: TranslationConfig,\n  tempObjectPath: string,\n  from: string,\n  to: string[],\n  newFileName: string\n) {\n  // step: get file details -> data, path\n  let { jsonObj, objectPath } = await getFileFromPath(tempObjectPath);\n  if (jsonObj === undefined) {\n    error(messages.file.no_file_in_path);\n    return;\n  }\n\n  jsonObj = { data: JSON.parse(jsonObj) };\n\n  // step: translate object\n  let newJsonObj = await objectTranslator(TranslationConfig, jsonObj, from, to);\n  if (newJsonObj === undefined) {\n    error(messages.file.cannot_translate);\n    return;\n  }\n\n  // step: save translated data\n  let latestPath = objectPath.replace(/\\\\/g, '/');\n  const fileExt = getFileExt(latestPath);\n\n  let rootFolder = getRootFolder(latestPath);\n\n  (newJsonObj as Array<translatedObject>).forEach(async (element, index) => {\n    const currentJsonObj = element.data;\n\n    let fileName = newFileName\n      ? `/${newFileName}.${to[index]}.${fileExt}`\n      : `/${to[index]}.${fileExt}`;\n\n    await saveFilePublic(rootFolder + fileName, currentJsonObj);\n\n    success(\n      `For ${getLanguageKeyFromValue(\n        to[index],\n        TranslationConfig.TranslationModule.languages\n      )} --> ${fileName} created.`\n    );\n  });\n}\n\nexport async function getFileFromPath(\n  objectPath: string\n): Promise<{ jsonObj: any; objectPath: string }> {\n  let jsonObj: any = await getFile(objectPath);\n\n  if (jsonObj === undefined) {\n    objectPath = __dirname + '\\\\' + objectPath;\n\n    jsonObj = await getFile(objectPath);\n  }\n\n  return { jsonObj, objectPath };\n}\n\nfunction getFileExt(latestPath: string): string {\n  // Check if source file has YAML extension and return the extension (\"yml\" or \"yaml\").\n  const sourceFileMatchYamlExt = matchYamlExt(latestPath);\n\n  // When source file has \"yml\" or \"yaml\" extension, use the same in output file path.\n  // Otherwise, default \"json\" extension used.\n  const fileExt = sourceFileMatchYamlExt || 'json';\n\n  return fileExt;\n}\n","import * as fs from 'fs';\nimport { error, success } from '../utils/console';\n\nexport async function readProxyFile(file_path: string) {\n  const confs = {\n    checkerRX: /^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}:(\\d){1,}$/,\n  };\n  const data = await fs.promises.readFile(file_path, 'utf8');\n  if (!data) {\n    error('proxy file is empty!');\n    return;\n  }\n\n  let proxyList = data.split(/\\r?\\n/);\n\n  proxyList = proxyList.filter(proxy_item => confs.checkerRX.test(proxy_item));\n\n  success(`\\n---------------- Proxy Mode ----------------\\n`);\n  global.proxyList = proxyList;\n}\n","import {\n  translationModuleKeys,\n  getTranslationModuleByKey,\n} from '../modules/helpers';\nimport { messages } from '../utils/console';\nimport { default_concurrency_limit } from '../utils/micro';\nvar inquirer = require('inquirer');\n\nexport async function promptModuleKey(): Promise<string> {\n  const module_key_choices = translationModuleKeys().map(key => {\n    return {\n      name:\n        getTranslationModuleByKey(key).altName +\n        (getTranslationModuleByKey(key).requirements\n          ? ' | requirements: ' +\n            (getTranslationModuleByKey(key).requirements as string[]).join(\n              ' | '\n            )\n          : ''),\n      value: key,\n      short: key,\n    };\n  });\n\n  let selectedModuleKey = '';\n\n  await inquirer\n    .prompt([\n      {\n        type: 'list',\n        name: 'moduleKey',\n        message: messages.cli.select_module_message,\n        pageSize: 20,\n        choices: [...module_key_choices, new inquirer.Separator()],\n      },\n    ])\n    .then((answers: any) => {\n      selectedModuleKey = answers.moduleKey;\n    });\n\n  return selectedModuleKey;\n}\n\nexport async function promptFrom(languages: Record<string, string>) {\n  const fromLanguageKeys = Object.keys(languages);\n\n  const answers = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'from',\n      message: messages.cli.from_message,\n      pageSize: 20,\n      choices: [...fromLanguageKeys, new inquirer.Separator()],\n    },\n  ]);\n\n  return answers.from;\n}\n\nexport async function promptTo(\n  languages: Record<string, string>,\n  default_languages?: string[]\n) {\n  let toLanguageKeys = Object.keys(languages);\n  toLanguageKeys = toLanguageKeys.filter(key => key !== `Automatic`);\n\n  const answers = await inquirer.prompt([\n    {\n      type: 'checkbox',\n      name: 'to',\n      pageSize: 20,\n      message: messages.cli.to_message,\n      choices: toLanguageKeys,\n      default: default_languages ? default_languages : [],\n    },\n  ]);\n\n  return answers.to;\n}\n\nexport async function promptName() {\n  const answers = await inquirer.prompt([\n    {\n      type: 'string',\n      name: 'name',\n      message: messages.cli.new_file_name_message,\n      // default: default_name ? default_name : undefined,\n    },\n  ]);\n\n  return answers.name;\n}\n\nexport async function promptFallback() {\n  const answers = await inquirer.prompt([\n    {\n      type: 'string',\n      name: 'fallback',\n      message: messages.cli.fallback_message,\n      default: '',\n    },\n  ]);\n\n  if (answers.fallback === '') {\n    return 'no';\n  }\n\n  return answers.fallback;\n}\n\nexport async function promptConcurrencyLimit() {\n  const answers = await inquirer.prompt([\n    {\n      type: 'number',\n      name: 'concurrencylimit',\n      message: messages.cli.concurrency_limit_message,\n      default: '',\n    },\n  ]);\n\n  if (answers.concurrencylimit === '') {\n    return default_concurrency_limit;\n  }\n\n  return answers.concurrencylimit;\n}\n","import {\n  translationModuleKeys,\n  getTranslationModuleByKey,\n} from '../modules/helpers';\nimport { fileTranslator, getFileFromPath } from '../core/json_file';\nimport {\n  error,\n  info,\n  messages,\n  supportedLanguagesUrl,\n  warn,\n} from '../utils/console';\nimport loading from 'loading-cli';\nimport {\n  current_version,\n  translationStatistic,\n  default_concurrency_limit,\n  default_fallback,\n  fallbacks,\n} from '../utils/micro';\nimport { readProxyFile } from '../core/proxy_file';\nimport { Command, Option, OptionValues } from 'commander';\nimport {\n  promptFrom,\n  promptName,\n  promptTo,\n  promptModuleKey,\n  promptFallback,\n  promptConcurrencyLimit,\n} from './prompt';\nimport { TranslationConfig, TranslationModule } from '../modules/modules';\n\nconst program = new Command();\n\nexport async function initializeCli() {\n  global.totalTranslation = 0;\n  global.totalTranslated = 0;\n  global.proxyIndex = 0;\n  global.proxyList = [];\n\n  program\n    .version(current_version)\n    .addHelpText('beforeAll', messages.cli.welcome)\n    .description(messages.cli.description)\n    .usage(messages.cli.usage)\n    .addOption(\n      new Option(`-m, --module <Module>`, messages.cli.module).choices(\n        translationModuleKeys()\n      )\n    )\n    .addOption(new Option(`-f, --from <Language>`, messages.cli.from))\n    .addOption(new Option(`-t, --to <Languages...>`, messages.cli.to))\n    .addOption(new Option(`-n, --name <string>`, messages.cli.new_file_name))\n    .addOption(\n      new Option(`-fb, --fallback <string>`, messages.cli.fallback).choices(\n        Object.keys(fallbacks)\n      )\n    )\n    .addOption(\n      new Option(\n        `-cl, --concurrencylimit <number>`,\n        messages.cli.concurrency_limit\n      )\n    )\n    .addHelpText(\n      'after',\n      `\\n${messages.cli.usage_with_proxy}\\n${messages.cli.usage_by_ops}`\n    )\n    .addHelpText('afterAll', supportedLanguagesUrl);\n\n  program.showSuggestionAfterError();\n  program.exitOverride();\n\n  try {\n    program.parse();\n  } catch (err) {\n    process.exit();\n  }\n\n  if (!process.argv.slice(2).length) {\n    program.outputHelp();\n    return;\n  }\n\n  /*\n    If the user adds an option without a value or forgets the value of the option, the value of the next option is applied to the proxy file path.\n    It is actually a problem in commander.js\n    I've come to this temporary solution, which is if the proxy path does not end with .txt display error 'messages.cli.proxy_File_notValid_or_not_empty_options'\n*/\n  if (program.args[1] !== undefined && !program.args[1].includes('.txt')) {\n    error(messages.cli.proxy_file_notValid_or_not_empty_options);\n    process.exit(1);\n  }\n  translate();\n}\n\nasync function translate() {\n  const commandArguments = program.args;\n  const commandOptions = program.opts();\n\n  if (commandArguments[1] && typeof commandArguments[1] === 'string') {\n    const file_path = commandArguments[1];\n    await readProxyFile(file_path);\n  }\n\n  // no path condition\n  let objectPath = commandArguments[0];\n  if (objectPath === undefined || objectPath === '') {\n    error(messages.file.no_path);\n    info(`([path] ${messages.cli.paths})`);\n    return;\n  }\n\n  // no file in the path condition\n  let { jsonObj } = await getFileFromPath(objectPath);\n  if (jsonObj === undefined) {\n    error(messages.file.no_file_in_path);\n    return;\n  }\n\n  // get Translation Module\n  const TranslationConfig = await translationConfig(commandOptions);\n\n  // get from language\n  const fromLanguageValue = await fromLanguage(\n    commandOptions,\n    TranslationConfig.TranslationModule\n  );\n\n  // get to languages\n  const toLanguageValues = await toLanguages(\n    commandOptions,\n    TranslationConfig.TranslationModule\n  );\n\n  // get filename\n  const fileNameValue = await fileName(commandOptions);\n\n  // get fallback\n  const fallbackValue = await fallback(commandOptions);\n  TranslationConfig.fallback = fallbackValue;\n\n  // get concurrency limit\n  const concurrencyLimitValue = await concurrencyLimit(commandOptions);\n  TranslationConfig.concurrencyLimit = concurrencyLimitValue;\n\n  // set loading\n  const { load, refreshInterval } = setLoading();\n\n  await fileTranslator(\n    TranslationConfig,\n    objectPath,\n    fromLanguageValue,\n    toLanguageValues,\n    fileNameValue\n  );\n\n  load.succeed(\n    `DONE! ${translationStatistic(\n      global.totalTranslation,\n      global.totalTranslation\n    )}`\n  );\n  clearInterval(refreshInterval);\n\n  info(messages.cli.creation_done);\n}\n\n// getting input from user\nasync function translationConfig(\n  commandOptions: OptionValues\n): Promise<TranslationConfig> {\n  let moduleKey = commandOptions.module ?? undefined;\n  let TranslationModule: TranslationModule;\n\n  if (moduleKey && translationModuleKeys().includes(moduleKey)) {\n    // valid module key\n    TranslationModule = getTranslationModuleByKey(moduleKey);\n  } else if (moduleKey) {\n    // invalid module key\n    error(`${messages.cli.module_not_available}`);\n    process.exit(1);\n  } else {\n    // no module key\n    moduleKey = await promptModuleKey();\n    TranslationModule = getTranslationModuleByKey(moduleKey);\n  }\n\n  let translationConfig: TranslationConfig = {\n    moduleKey,\n    TranslationModule,\n    concurrencyLimit: default_concurrency_limit,\n    fallback: default_fallback,\n  };\n\n  return translationConfig;\n}\n\nasync function fromLanguage(\n  commandOptions: OptionValues,\n  TranslationModule: TranslationModule\n): Promise<string> {\n  const fromLanguageInput: any = commandOptions.from ?? undefined;\n  let fromLanguageValue: string;\n\n  const supportedLanguageValues = Object.values(TranslationModule.languages);\n\n  if (!fromLanguageInput) {\n    const fromLanguageInput = await promptFrom(TranslationModule.languages);\n    fromLanguageValue = TranslationModule.languages[fromLanguageInput];\n  } else {\n    if (supportedLanguageValues.includes(fromLanguageInput)) {\n      fromLanguageValue = fromLanguageInput;\n    } else {\n      error(`[${fromLanguageInput}]: ${messages.cli.from_not_available}`);\n      process.exit(1);\n    }\n  }\n\n  return fromLanguageValue;\n}\n\nasync function toLanguages(\n  commandOptions: OptionValues,\n  TranslationModule: TranslationModule\n): Promise<string[]> {\n  const toLanguageInputs: any = commandOptions.to ?? undefined;\n  let toLanguageValues: string[];\n\n  const supportedLanguageValues = Object.values(TranslationModule.languages);\n\n  if (!toLanguageInputs) {\n    const toLanguageKeys = await promptTo(TranslationModule.languages);\n    toLanguageValues = toLanguageKeys.map(\n      (key: string) => TranslationModule.languages[key]\n    );\n\n    // second chance to select languages\n    if (toLanguageValues.length === 0 || toLanguageValues === undefined) {\n      warn(messages.cli.no_selected_language);\n      const toLanguageKeys = await promptTo(TranslationModule.languages);\n      toLanguageValues = toLanguageKeys.map(\n        (key: string) => TranslationModule.languages[key]\n      );\n    }\n  } else {\n    toLanguageValues = toLanguageInputs.map((lang: string) => {\n      if (supportedLanguageValues.includes(lang)) {\n        return lang;\n      } else {\n        error(`[${lang}]: ${messages.cli.to_not_available}`);\n        process.exit(1);\n      }\n    });\n  }\n\n  return toLanguageValues;\n}\n\nasync function fileName(commandOptions: OptionValues): Promise<string> {\n  let newFileName: string = commandOptions.name ?? undefined;\n\n  if (!newFileName) {\n    const name = await promptName();\n    newFileName = name;\n  }\n\n  return newFileName;\n}\n\nasync function fallback(commandOptions: OptionValues): Promise<boolean> {\n  let fallbackStr: string = commandOptions.fallback ?? undefined;\n  let fallback: boolean = false;\n\n  if (!fallbackStr) {\n    fallbackStr = await promptFallback();\n\n    if (!Object.keys(fallbacks).includes(fallbackStr)) {\n      error(`[${fallbackStr}]: ${messages.cli.fallback_not_available}`);\n      process.exit(1);\n    }\n  }\n\n  if (fallbackStr === 'yes') {\n    fallback = fallbacks.yes;\n  } else {\n    fallback = fallbacks.no;\n  }\n\n  return fallback;\n}\n\nasync function concurrencyLimit(commandOptions: OptionValues): Promise<number> {\n  let concurrencyLimitInput: number =\n    commandOptions.concurrencylimit ?? undefined;\n\n  if (!concurrencyLimitInput) {\n    concurrencyLimitInput = await promptConcurrencyLimit();\n  }\n\n  let concurrencyLimit: number = Number(concurrencyLimitInput);\n\n  return Number.isNaN(concurrencyLimit)\n    ? default_concurrency_limit\n    : Number(concurrencyLimit);\n}\n\nfunction setLoading() {\n  const load = loading({\n    text: `Translating. Please wait. ${translationStatistic(\n      global.totalTranslated,\n      global.totalTranslation\n    )}`,\n    color: 'yellow',\n    interval: 100,\n    stream: process.stdout,\n    frames: ['.', 'o', 'O', '°', 'O', 'o', '.'],\n  }).start();\n\n  const refreshInterval = setInterval(() => {\n    load.text = `Translating. Please wait. ${translationStatistic(\n      global.totalTranslated,\n      global.totalTranslation\n    )}`;\n  }, 200);\n\n  return { load, refreshInterval };\n}\n","import { initializeCli } from './cli/cli';\nimport { plaintranslate } from './core/translator';\nimport { fileTranslator } from './core/json_file';\nimport { objectTranslator } from './core/json_object';\nimport { TranslationConfig, TranslationModules } from './modules/modules';\nimport { default_concurrency_limit, default_fallback } from './utils/micro';\n\n// TODO: fix to get from user\nexport async function translateWord(word: string, from: string, to: string) {\n  let config: TranslationConfig = {\n    moduleKey: 'google',\n    TranslationModule: TranslationModules['google'],\n    concurrencyLimit: default_concurrency_limit,\n    fallback: default_fallback,\n  };\n\n  return await plaintranslate(config, word, from, to, []);\n}\n// TODO: fix to get from user\nexport async function translateObject(\n  object: translatedObject,\n  from: string,\n  to: string[]\n): Promise<translatedObject | translatedObject[]> {\n  let hard_copy = JSON.parse(JSON.stringify(object));\n\n  let config: TranslationConfig = {\n    moduleKey: 'google',\n    TranslationModule: TranslationModules['google'],\n    concurrencyLimit: default_concurrency_limit,\n    fallback: default_fallback,\n  };\n\n  return objectTranslator(config, hard_copy, from, to);\n}\n\nexport async function translateFile(\n  objectPath: string,\n  from: string,\n  to: string[],\n  newFileName: string\n) {\n  let config: TranslationConfig = {\n    moduleKey: 'google',\n    TranslationModule: TranslationModules['google'],\n    concurrencyLimit: default_concurrency_limit,\n    fallback: default_fallback,\n  };\n\n  return fileTranslator(config, objectPath, from, to, newFileName);\n}\n\nexport async function runCli() {\n  initializeCli();\n}\n\n// TYPES\nexport interface translatedObject {\n  [key: string]: any;\n}\n"],"names":["translationStatistic","totalTranslated","totalTranslation","fallbacks","yes","no","default_fallback","GoogleTranslateLanguages","Automatic","Afrikaans","Albanian","Amharic","Arabic","Armenian","Azerbaijani","Basque","Belarusian","Bengali","Bosnian","Bulgarian","Catalan","Cebuano","Chichewa","Chinese_Simplified","Chinese_Traditional","Corsican","Croatian","Czech","Danish","Dutch","English","Esperanto","Estonian","Filipino","Finnish","French","Frisian","Galician","Georgian","German","Greek","Gujarati","Haitian_Creole","Hausa","Hawaiian","Hebrew","Hindi","Hmong","Hungarian","Icelandic","Igbo","Indonesian","Irish","Italian","Japanese","Javanese","Kannada","Kazakh","Khmer","Korean","Kurdish_Kurmanji","Kyrgyz","Lao","Latin","Latvian","Lithuanian","Luxembourgish","Macedonian","Malagasy","Malay","Malayalam","Maltese","Maori","Marathi","Mongolian","Myanmar_Burmese","Nepali","Norwegian","Pashto","Persian","Polish","Portuguese","Punjabi","Romanian","Russian","Samoan","Scots_Gaelic","Serbian","Sesotho","Shona","Sindhi","Sinhala","Slovak","Slovenian","Somali","Spanish","Sundanese","Swahili","Swedish","Tajik","Tamil","Telugu","Thai","Turkish","Ukrainian","Urdu","Uzbek","Vietnamese","Welsh","Xhosa","Yiddish","Yoruba","Zulu","GoogleTranslate2Languages","LibreTranslateLanguages","Chinese","ArgosTranslateLanguages","BingTranslateLanguages","Assamese","Bangla","Bashkir","Cantonese_Traditional","Chinese_Literary","Dari","Divehi","Faroese","Fijian","French_Canada","Hmong_Daw","Inuinnaqtun","Inuktitut","Inuktitut_Latin","Klingon_Latin","Kurdish_Central","Kurdish_Northern","Mongolian_Cyrillic","Mongolian_Traditional","Māori","Odia","Portuguese_Brazil","Portuguese_Portugal","Querétaro_Otomi","Serbian_Cyrillic","Serbian_Latin","Tahitian","Tatar","Tibetan","Tigrinya","Tongan","Turkmen","Upper_Sorbian","Uyghur","Uzbek_Latin","Yucatec_Maya","DeepLTranslateLanguages","LanguageMapping","google","google2","libre","argos","bing","deepl","success","message","console","log","error","info","warn","supportedLanguagesUrl","messages","cli","welcome","require","textSync","description","usage","usage_with_proxy","usage_by_ops","paths","module","from","to","new_file_name","fallback","concurrency_limit","select_module_message","from_message","to_message","new_file_name_message","fallback_message","concurrency_limit_message","module_not_available","translationModuleKeys","from_not_available","to_not_available","no_selected_language","fallback_not_available","Object","keys","proxy_file_notValid_or_not_empty_options","creation_done","object","file","no_path","no_file_in_path","cannot_translate","cannot_save_file","_translateWithLibre","str","body","q","safeValueTransition","source","target","format","api_key","secret","_context","axios","post","headers","Origin","data","translatedText","_translateWithArgos","_context2","Referer","_translateWithBing","_context3","bingTranslator","translation","_translateWithGoogle","global","proxyList","length","proxyIndex","_context4","proxy","agent","createHttpProxyAgent","translateWithGoogleByProxySupport","timeout","_translateWithGoogleByProxySupport","options","_context5","translate","fetchOptions","undefined","text","_translateWithDeepL","DEEPL_API_KEY","process","env","_context6","Error","target_lang","source_lang","Authorization","Content-Type","translations","_translateWithGoogle2","_context7","translate2","nonSafeTypes","TranslationModules","name","altName","languages","requirements","value","value_safety","result","is_safe","type","empty","valueIsSafe","substring","getTranslationModuleByKey","key","getLanguageKeyFromValue","find","getLanguageVariant","sourceValue","destination","destinationValue","matchYamlExt","objectPath","match","_objectPath$match","getFile","_getFile","json_file","fs","then","JSON","stringify","YAML","_","getRootFolder","path","arr","split","pop","root","join","saveFilePublic","_saveFilePublic","json","map","mapIgnoredValues","mapByDoubleBracket","replace","url","double_brackets_map","mapBySingleBracket","word","single_brackets_map","unMap","unmapIgnoredValues","unmapBySingleBracket","unmapByDoubleBracket","start","end","replaced_start","replaced_end","counter","regex","RegExp","entries","plaintranslate","_plaintranslate","TranslationConfig","skipModuleKeys","_ignorer$map","ignorer","ignored_str","TranslationModule","translatedStr","clonedTranslationConfig","assign","clonedSkipModuleKeys","push","moduleKey","_newTranslationModule","newTranslationModule","newModuleKey","newFrom","newTo","sourceModuleKeys","default_data","filter","item","includes","queue","TaskQueue","bluebirdPromise","objectTranslator","_objectTranslator","concurrency","concurrencyLimit","generalObject","Promise","all","index","indexAsNum","Number","copyObject","parse","deepDiver","_deepDiver","has","prototype","hasOwnProperty","bind","k","add","err","fileTranslator","_fileTranslator","tempObjectPath","newFileName","getFileFromPath","_yield$getFileFromPat","jsonObj","newJsonObj","latestPath","fileExt","getFileExt","rootFolder","forEach","element","currentJsonObj","fileName","_getFileFromPath","__dirname","readProxyFile","_readProxyFile","file_path","confs","checkerRX","readFile","proxy_item","test","inquirer","promptModuleKey","_promptModuleKey","module_key_choices","short","selectedModuleKey","prompt","pageSize","choices","Separator","answers","promptFrom","_promptFrom","fromLanguageKeys","promptTo","_promptTo","default_languages","toLanguageKeys","default","promptName","_promptName","promptFallback","_promptFallback","promptConcurrencyLimit","_promptConcurrencyLimit","concurrencylimit","program","Command","initializeCli","_initializeCli","version","addHelpText","addOption","Option","showSuggestionAfterError","exitOverride","exit","argv","slice","outputHelp","args","_translate","commandArguments","commandOptions","opts","translationConfig","fromLanguage","fromLanguageValue","toLanguages","toLanguageValues","fileNameValue","_setLoading","setLoading","load","refreshInterval","succeed","clearInterval","_translationConfig","_fromLanguage","fromLanguageInput","supportedLanguageValues","values","_toLanguages","toLanguageInputs","lang","_fileName","_fallback","fallbackStr","_concurrencyLimit","concurrencyLimitInput","_context8","isNaN","loading","color","interval","stream","stdout","frames","setInterval","_translateWord","config","_translateObject","hard_copy","_translateFile","_runCli"],"mappings":"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"}
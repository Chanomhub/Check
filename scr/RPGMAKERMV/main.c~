#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include "cJSON.h"  // Include a JSON library (e.g., jansson, cJSON)

int main() {
    char dir[1024];
    DIR *d;
    struct dirent *entry;
    json_object *json_data = json_object_new_array(); // Create a JSON array

    printf("Pls specify the default folder location: ");
    fgets(dir, sizeof(dir), stdin);
    dir[strcspn(dir, "\n")] = '\0';

    for (int i = 0; i < strlen(dir); i++) {
        if (dir[i] == '\\') {
            dir[i] = '/';
        }
    }

    chdir(dir);
    strcat(dir, "/www/data");

    d = opendir(dir);
    if (d == NULL) {
        printf("Unable to open folder: '%s' \n", dir);
        return 1;
    }

    while ((entry = readdir(d)) != NULL) {
        char filename[1024];
        strncpy(filename, entry->d_name, sizeof(filename) - 1);
        filename[sizeof(filename) - 1] = '\0'; // Ensure null termination

        json_object *json_file = json_object_new_object();  // Create a JSON object for each file

        if (strcmp(filename, "Armors.json") == 0 ||
            strcmp(filename, "States.json") == 0 ||
            strcmp(filename, "Enemies.json") == 0 ||
            strcmp(filename, "MapInfos.json") == 0 ||
            strcmp(filename, "Actors.json") == 0 ||
            strcmp(filename, "Classes.json") == 0 ||
            strcmp(filename, "Weapons.json") == 0 ||
            strcmp(filename, "Items.json") == 0 ||
            strcmp(filename, "Skills.json") == 0) {
            // Add key-value pair for specific files
            json_object_object_add(json_file, "name", json_object_new_string(filename));
            json_object_object_add(json_file, "path", json_object_new_string(strcat(dir, "/")));
            strcat(dir, "/"); // Assuming full path construction for specific files
            strcat(dir, filename);
            printf("found: '%s'\n", filename);
        }

        if (strlen(filename) >= 3 && strncmp(filename, "Map", 3) == 0) {
            // Add key-value pair for map files
            json_object_object_add(json_file, "name", json_object_new_string(filename));
            json_object_object_add(json_file, "path", json_object_new_string(strcat(dir, "/")));
            strcat(dir, "/"); // Assuming full path construction for map files
            strcat(dir, filename);
            printf("found: '%s'\n", filename);
            json_object_array_add(json_data, json_file);  // Add file object to JSON array
        }

        // Reset directory path after processing each file (assuming full path construction)
        dir[strlen(dir) - strlen(filename) - 1] = '\0';
    }

    closedir(d);

    // Print the final JSON data (assuming pretty-printing is desired)
    char *json_string = json_object_to_json_string_ext(json_data, JSON_C_TO_STRING_PRETTY);
    printf("\nJSON data:\n%s\n", json_string);
    free(json_string); // Free memory allocated for the JSON string

    json_object_put(json_data); // Release resources used by the JSON object

    return 0;
}
